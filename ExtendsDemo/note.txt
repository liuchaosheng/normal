关于类实例化的过程总结：
1、首先理解非继承情况下的过程：
I、首先分配空间并赋默认值。
II、可以理解成编译的时候：在构造方法之前插入了init()方法。
该方法是自己生成的执行属性定义的初始赋值和构造块。
所以执行构造方法的时候会想执行属性定义的初始赋值，然后在执行构造块，最后才是构造方法的逻辑。
public class A{
	private String msg = "aaa";
	{
		msg = "bbb";
	}
	public A(){
		this.msg = "ccc";
	}
}

可以理解成：
public class A{
	public A(){
		// 编译器生成的init()方法会插入到每个构造器前。
		init()  ==>  private String msg = "aaa";
					 msg = "bbb";
		
		// 然后才是构造器中定义的逻辑过程
		this.msg = "ccc";
	}
}

2、如果有继承情况：
public class B extends A{
	private int num = 100;
	{
		num = 1000;
	}
	public B(){
		super();
		this.num = 2000;
	}
}

可以理解成：
public class B extends A{
	private int num = 100;
	{
		num = 1000;
	}
	public B(){
		super();  ==> 去调用了A的构造器
		init() ==> private int num = 100;
				   num = 1000;
		this.num = 2000;
	}
	// 先执行A的构造，然后在执行B的构造。
	// 如果在A构造方法中访问了B的属性，那么意味着可能B还没有构造，逻辑上流程错误。
}

