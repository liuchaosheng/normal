关于自己写链表的总结：
1、将Node定义为内部类可以解决属性访问的问题。
2、给Node定义一些递归方法也能将代码编写变得容易：
进一步理解递归：
（1）静态方法递归处理。
也就是说递归方法的发起者不是一个对象，而是使用类名调用方法进行。
这种情况下，要么参数在随着改变，要么方法访问的静态域属性在随着改变，
不然递归没有意义。
如：
public class Demo{
	// 以下为实现1~n个数累加的方法，该方法是通过改变传入参数的方式来。
	// 使得递归可以有出口的。
	public static int func(int n){
		if(n == 1){
			return 1;
		}
		return n + func(n-1);
	}
}
或者：
public class Demo{
	private static int sum = 0;
	public static void func(int n){
		if(n == 1){
			sum += 1;
		}else{
			sum += n;
			func(n-1);
		}
	}
}

(2)普通方法递归处理
要么类似于静态方法，传入参数在改变。
要么方法中改变了this指向，就想当前项目中的Node类一样。
要么递归方法一直在改变同一个对象的某些属性。
（否则递归将无出口的条件）


