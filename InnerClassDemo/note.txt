关于内部类的总结：
1、要明确内部类的四种形式：
I、成员内部类：内部类定义在外部内的类体中。
形如：
public class Outer{
	public class Inner{
		....
	}
}

II、静态内部类：定义在外部类类体中，但是使用static修饰。
形如：
public class Outer{
	public static class Inner{
		....
	}
}

III、局部内部类：定义在方法中。
形如：
public class Outer{
	public void fun(){
		class Inner{
			.....
		}
		Inner inner = new Inner();
		....
	}
}

IV、匿名内部类：匿名内部类用在接口或者抽象类的实例化的时候。
这种方式定义的类没有名字，只会在代码执行的时候产生一个实例。（不一定是放在方法中）
形如：
public class Outer{
	public void fun(){
		Runnable run = new Runnable(){
			@Override
			public void run(){
				.....
			}
		};
	}
}

2、成员内部类
（1）必须要在外部类实例中存在的时候使用，使用Outer.this去引用外部类实例。
（2）成员内部类不能本身不能定义静态域。
（3）成员内部类可以被所有的权限修饰符修饰。
（4）如果能在类外部创建实例，语法：Outer.Inner inner = new Outer().new Inner();
（5）可以访问外部类的所有属性和方法。

3、静态内部类
（1）如果想让某个内部类不依赖于外部类的实例就能使用，则可以使用静态内部类。
（2）静态内部类是一个独立的类，可以定义自身的静态域。
（3）可以被所有的权限修饰符修饰。
（4）如果能在类外部创建实例，语法：Outer.Inner inner = new Outer.Inner();
（5）只能访问外部类的静态域。

4、局部内部类和匿名内部类
（1）在所定义的方法中有效，所以权限修饰符没有意义。
（2）如果定义在外部类的静态方法中，则可以访问外部类静态域和方法局部变量。
（3）如果定义在外部类的普通方法中，则可以访问外部类所有的域和方法局部变量。
（4）自身不能定义静态域。
（5）匿名内部类在方法中没有类名，只能使用一次，而且无法定义构造方法。

5、lamda表达式：解决匿名内部类语法结构复杂的问题，使用函数式编程的语法：
(param1,param2,...) -> {多行语句}      例如：
									() -> {
										System.out.println("sss");
										return "sss";
									};
(param1,param2,...) -> 单行语句；   例如：
									() -> System.out.println("sss");
									
(param1,param2,...) -> 表达式；         例如：
									(s1,s2) -> s1 + s2;  // 不用写return语句 




