javap -verbose Hello
Classfile /E:/javademo/Hello.class
  Last modified 2019-9-30; size 838 bytes
  MD5 checksum f1cb5e2ea1f30fdfc40f87ba226c34c0
  Compiled from "Hello.java"
class Hello
  minor version: 0
  major version: 52
  flags: ACC_SUPER
Constant pool:
   #1 = Methodref          #11.#28        // java/lang/Object."<init>":()V
   #2 = String             #29            // Hello - private - field
   #3 = Fieldref           #7.#30         // Hello.name:Ljava/lang/String;
   #4 = Fieldref           #31.#32        // java/lang/System.out:Ljava/io/PrintStream;
   #5 = Fieldref           #7.#33         // Hello.sName:Ljava/lang/String;
   #6 = Methodref          #34.#35        // java/io/PrintStream.println:(Ljava/lang/String;)V
   #7 = Class              #36            // Hello
   #8 = Methodref          #7.#28         // Hello."<init>":()V
   #9 = Methodref          #7.#37         // Hello.getName:()Ljava/lang/String;
  #10 = String             #38            // Hello - static - field
  #11 = Class              #39            // java/lang/Object
  #12 = Utf8               sName
  #13 = Utf8               Ljava/lang/String;
  #14 = Utf8               name
  #15 = Utf8               <init>
  #16 = Utf8               ()V
  #17 = Utf8               Code
  #18 = Utf8               LineNumberTable
  #19 = Utf8               (Ljava/lang/String;)V
  #20 = Utf8               setName
  #21 = Utf8               getName
  #22 = Utf8               ()Ljava/lang/String;
  #23 = Utf8               main
  #24 = Utf8               ([Ljava/lang/String;)V
  #25 = Utf8               <clinit>
  #26 = Utf8               SourceFile
  #27 = Utf8               Hello.java
  #28 = NameAndType        #15:#16        // "<init>":()V
  #29 = Utf8               Hello - private - field
  #30 = NameAndType        #14:#13        // name:Ljava/lang/String;
  #31 = Class              #40            // java/lang/System
  #32 = NameAndType        #41:#42        // out:Ljava/io/PrintStream;
  #33 = NameAndType        #12:#13        // sName:Ljava/lang/String;
  #34 = Class              #43            // java/io/PrintStream
  #35 = NameAndType        #44:#19        // println:(Ljava/lang/String;)V
  #36 = Utf8               Hello
  #37 = NameAndType        #21:#22        // getName:()Ljava/lang/String;
  #38 = Utf8               Hello - static - field
  #39 = Utf8               java/lang/Object
  #40 = Utf8               java/lang/System
  #41 = Utf8               out
  #42 = Utf8               Ljava/io/PrintStream;
  #43 = Utf8               java/io/PrintStream
  #44 = Utf8               println
{
  public static java.lang.String sName;
    descriptor: Ljava/lang/String;
    flags: ACC_PUBLIC, ACC_STATIC

  public Hello();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: aload_0
         5: ldc           #2                  // String Hello - private - field
         7: putfield      #3                  // Field name:Ljava/lang/String;
        10: return
      LineNumberTable:
        line 4: 0
        line 3: 4
        line 4: 10

  public Hello(java.lang.String);
    descriptor: (Ljava/lang/String;)V
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: aload_0
         5: ldc           #2                  // String Hello - private - field
         7: putfield      #3                  // Field name:Ljava/lang/String;
        10: aload_0
        11: aload_1
        12: putfield      #3                  // Field name:Ljava/lang/String;
        15: return
      LineNumberTable:
        line 5: 0
        line 3: 4
        line 6: 10
        line 7: 15

  public void setName(java.lang.String);
    descriptor: (Ljava/lang/String;)V
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: putfield      #3                  // Field name:Ljava/lang/String;
         5: return
      LineNumberTable:
        line 9: 0
        line 10: 5

  public java.lang.String getName();
    descriptor: ()Ljava/lang/String;
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #3                  // Field name:Ljava/lang/String;
         4: areturn
      LineNumberTable:
        line 12: 0

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=2, args_size=1
         0: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;
         3: getstatic     #5                  // Field sName:Ljava/lang/String;
         6: invokevirtual #6                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V
         9: new           #7                  // class Hello
        12: dup
        13: invokespecial #8                  // Method "<init>":()V
        16: astore_1
        17: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;
        20: aload_1
        21: invokevirtual #9                  // Method getName:()Ljava/lang/String;
        24: invokevirtual #6                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        27: return
      LineNumberTable:
        line 15: 0
        line 16: 9
        line 17: 17
        line 18: 27

  static {};
    descriptor: ()V
    flags: ACC_STATIC
    Code:
      stack=1, locals=0, args_size=0
         0: ldc           #10                 // String Hello - static - field
         2: putstatic     #5                  // Field sName:Ljava/lang/String;
         5: return
      LineNumberTable:
        line 2: 0
}
SourceFile: "Hello.java"


增加的总结：
1、java的字节码文件.class可以工具javap -verbose 命令的方式调出其文本的表示。
其中可以发现类的字节码文件中无非就是包括了Constant pool,类方法的代码。
常量池就是编译器词法分析出的表。
里面包含了：<cinit>方法和<init>方法，<cinit>方法用于初始化类的静态属性：该方法
由父类的<cinit>静态属性定义的代码初始化，静态块进行了组合形成。所以<cinit>必然会
触发先调用父类的<cinit>方法。
另外里面也包含了：<init>方法，该方法会被嵌入到类的所有构造方法中运行。其由，属性
定义的代码初始化，构造快组成，会被编译器插入到构造方法的前段，介于super()和构造
方法的逻辑之间。

2、没当虚拟机在执行的时候发现需要加载类，则会将对应类加载到内存，并调用<cinit>
方法类初始化类信息，然后产生Class对象，这个时候类才起作用。

3、所以对于当前的学习来说，通过简单分析字节码的组成，就知道了类初始化过程，类实例
过程。这样有利自己对代码运行过程的理解。

4、当然也有利自己对类加载器原理和类加载的机制的理解。

